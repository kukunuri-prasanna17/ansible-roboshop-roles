 
 #pip3.9 install botocore boto3 ( needed libarary's  to connect with AWS they were written in python)

- name: creating instances
  hosts: local
  connection: local
  vars: 
   ami_id: ami-09c813fb71547fc4f
   sg_id: sg-08da864ed7845ff7e
   zone_id: Z00127841VMI13X3SDGHZ
   domain_name: "daws86s.cfd"
    # we can instances through command-line
    # instances:
    #  - mongodb
    #  - redis 
  tasks:
    - name: Launch an EC2 instance
      amazon.aws.ec2_instance:
       name: "{{ item }}"
       instance_type: t3.micro
       security_group: "{{ sg_id }}"
       image_id: "{{ ami_id }}"
       region: us-east-1
       tags:
         Name: "{{ item }}"
      loop: "{{ instances }}"
      register: ec2_output

    # - name: print the ec2_output
    #   ansible.builtin.debug:
    #     msg: "{{ ec2_output }}"

    # - name: print private_ip
    #   ansible.builtin.debug: 
    #     msg: "{{ item.instances[0].private_ip_address }}"
    #   loop: "{{ ec2_output.results }}"
    
    # - name: print public_ip
    #   ansible.builtin.debug: 
    #     msg: "{{ item.instances[0].public_ip_address }}"
    #   loop: "{{ ec2_output.results }}"

    - name: create route53 record
      amazon.aws.route53:
       state: present
       zone: "{{ domain_name }}"
       record: "{{ item.item }}.{{ domain_name }}" #mongodb.daws86s.fun
       type: A
       ttl: 1
       value: "{{ item.instances[0].private_ip_address }}"
       overwrite: true
      loop: "{{ ec2_output.results }}"


  # we are creating one record with public only for frontend
    - name: create route53 record for frontend
      amazon.aws.route53:
       state: present
       zone: "{{ domain_name }}"
       record: "{{ domain_name }}" #daws86s.fun
       type: A
       ttl: 1
       value: "{{ item.instances[0].public_ip_address }}"
       overwrite: true
      when: item.item  == "frontend"
      loop: "{{ ec2_output.results }}"



